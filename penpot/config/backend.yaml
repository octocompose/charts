repos:
  services:
    backend:
      docker:
        registry: docker.io
        image: penpotapp/backend
        # https://hub.docker.com/r/penpotapp/backend/tags
        tag: 2.5.4


services:
  penpot-backend:
    restart: always

    volumes:
      - assets:/opt/data/assets

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - penpot

    ## Configuration envronment variables for the backend
    ## container.

    environment:
      PENPOT_FLAGS: "{{.configs.penpot.flags}}"
      
      # Max body size (30MiB); Used for plain requests, should never be
      # greater than multi-part size
      PENPOT_HTTP_SERVER_MAX_BODY_SIZE: "{{.configs.penpot.sizes.max_body}}"
      
      # Max multipart body size (350MiB)
      PENPOT_HTTP_SERVER_MAX_MULTIPART_BODY_SIZE: "{{.configs.penpot.sizes.max_multipart_body}}"
      
      ## Penpot SECRET KEY. It serves as a master key from which other keys for subsystems
      ## (eg http sessions, or invitations) are derived.
      ##
      ## If you leave it commented, all created sessions and invitations will
      ## become invalid on container restart.
      ##
      ## If you going to uncomment this, we recommend to use a trully randomly generated
      ## 512 bits base64 encoded string here.  You can generate one with:
      ##
      ## python3 -c "import secrets; print(secrets.token_urlsafe(64))"

      # PENPOT_SECRET_KEY: my-insecure-key

      ## The PREPL host. Mainly used for external programatic access to penpot backend
      ## (example: admin). By default it will listen on `localhost` but if you are going to use
      ## the `admin`, you will need to uncomment this and set the host to `0.0.0.0`.

      # PENPOT_PREPL_HOST: 0.0.0.0

      ## Database connection parameters. Don't touch them unless you are using custom
      ## postgresql connection parameters.

      PENPOT_DATABASE_URI: "{{.configs.penpot.postgres.url}}"
      PENPOT_DATABASE_USERNAME: "{{.configs.penpot.postgres.user}}"
      PENPOT_DATABASE_PASSWORD: "{{.configs.penpot.postgres.password}}"

      ## Redis is used for the websockets notifications. Don't touch unless the redis
      ## container has different parameters or different name.

      PENPOT_REDIS_URI: redis://redis/0

      ## Default configuration for assets storage: using filesystem based with all files
      ## stored in a docker volume.

      PENPOT_ASSETS_STORAGE_BACKEND: assets-fs
      PENPOT_STORAGE_ASSETS_FS_DIRECTORY: /opt/data/assets

      ## Also can be configured to to use a S3 compatible storage
      ## service like MiniIO. Look below for minio service setup.

      # AWS_ACCESS_KEY_ID: <KEY_ID>
      # AWS_SECRET_ACCESS_KEY: <ACCESS_KEY>
      # PENPOT_ASSETS_STORAGE_BACKEND: assets-s3
      # PENPOT_STORAGE_ASSETS_S3_ENDPOINT: http://penpot-minio:9000
      # PENPOT_STORAGE_ASSETS_S3_BUCKET: <BUKET_NAME>

      ## Telemetry. When enabled, a periodical process will send anonymous data about this
      ## instance. Telemetry data will enable us to learn how the application is used,
      ## based on real scenarios. If you want to help us, please leave it enabled. You can
      ## audit what data we send with the code available on github.

      PENPOT_TELEMETRY_ENABLED: false
      PENPOT_TELEMETRY_REFERER: octocompose

      ## Example SMTP/Email configuration. By default, emails are sent to the mailcatch
      ## service, but for production usage it is recommended to setup a real SMTP
      ## provider. Emails are used to confirm user registrations & invitations.

      PENPOT_SMTP_DEFAULT_FROM: "{{.configs.smtp.from}}"
      PENPOT_SMTP_DEFAULT_REPLY_TO: "{{.configs.smtp.reply_to}}"
      PENPOT_SMTP_HOST: "{{.configs.smtp.host}}"
      PENPOT_SMTP_PORT: "{{.configs.smtp.port}}"
      PENPOT_SMTP_USERNAME: "{{.configs.smtp.username}}"
      PENPOT_SMTP_PASSWORD: "{{.configs.smtp.password}}"
      PENPOT_SMTP_TLS: "{{.configs.smtp.tls}}"
      PENPOT_SMTP_SSL: "{{.configs.smtp.ssl}}"